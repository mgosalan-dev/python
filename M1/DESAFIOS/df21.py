import os         
import vlc       
from tabulate import tabulate  

# Fun√ß√£o que busca at√© 'limite' m√∫sicas (.mp3) numa pasta espec√≠fica, pra mostrar no preview
def buscar_musicas_pasta(pasta, limite=5):
    musicas = []
    # Caminho da pasta dentro do diret√≥rio do usu√°rio (ex: C:/Users/SeuUser/Music)
    caminho = os.path.join(os.path.expanduser("~"), pasta)

    # Se a pasta existir, listamos os arquivos .mp3 nela
    if os.path.exists(caminho):
        arquivos = [f for f in os.listdir(caminho) if f.endswith(".mp3")]

        # S√≥ pega at√© o limite de arquivos para n√£o lotar a tela
        musicas.extend(arquivo for i, arquivo in enumerate(arquivos[:limite], start=1))
    else:
        # Se n√£o existir, j√° avisa o user ‚Äî nada de fail silencioso, n√©? 
        print(f"Pasta n√£o encontrada: {caminho}")
    return musicas

# Fun√ß√£o que busca TODAS as m√∫sicas na pasta, pra mostrar e tocar depois
def buscar_todas_musicas(pasta):
    musicas = []
    caminho = os.path.join(os.path.expanduser("~"), pasta)

    if os.path.exists(caminho):
        arquivos = [f for f in os.listdir(caminho) if f.endswith(".mp3")]

        # Monta uma lista de dicion√°rios, com id, nome e caminho completo da m√∫sica
        musicas.extend(
            {
                "id": i,
                "nome": arquivo,
                "caminho": os.path.join(caminho, arquivo),
            }
            for i, arquivo in enumerate(arquivos, start=1)
        )
    else:
        print(f"Pasta n√£o encontrada: {caminho}")
    return musicas

# Mostra o resumo das pastas com as primeiras m√∫sicas, num formato tabela bonit√£o
def exibir_resumo(pastas, musicas_por_pasta, limite=5):
    tabela = []
    # Para cada pasta, monta uma linha da tabela com infos importantes
    for i, pasta in enumerate(pastas, start=1):
        lista_musicas = musicas_por_pasta[pasta]          # m√∫sicas preview
        qtd_total = len(buscar_todas_musicas(pasta))      # quantidade total na pasta
        
        # Se tiver mais m√∫sicas que o limite, corta s√≥ pra mostrar o preview
        musicas_display = lista_musicas if len(lista_musicas) < limite else lista_musicas[:limite]
        musicas_str = ", ".join(musicas_display)          # transforma lista em string
        
        # Monta a linha da tabela
        tabela.append([i, pasta, qtd_total, musicas_str])
    
    # Print da tabela formatada usando o tabulate (fancy_grid deixa mais style)
    print(tabulate(tabela, headers=["N√∫mero", "Pasta", "Qtd Total", f"At√© {limite} m√∫sicas na pasta"], tablefmt="fancy_grid"))

# Mostra a lista completa de m√∫sicas pra o usu√°rio escolher qual quer tocar
def exibir_lista(musicas):
    tabela = [[m["id"], m["nome"]] for m in musicas]
    print(tabulate(tabela, headers=["N√∫mero", "M√∫sica"], tablefmt="fancy_grid"))

# Fun√ß√£o que cria o player, toca o arquivo, e espera o user dar enter pra parar
def tocar_musica(caminho):
    player = vlc.MediaPlayer(caminho)  # Cria player VLC com o arquivo especificado
    player.play()                      # Come√ßa a tocar
    input("\n‚ñ∂Ô∏è Pressione Enter para parar a m√∫sica...\n")  # Pausa at√© o user apertar enter
    player.stop()                      # Para a m√∫sica

# Fun√ß√£o principal ‚Äî o cora√ß√£o do programa
def main():
    # Pastas padr√£o onde vamos procurar as m√∫sicas (pode adicionar mais!)
    pastas = ["Music", "Downloads"]
    
    # Pra cada pasta, busca as m√∫sicas para exibir no resumo (preview)
    musicas_para_resumo = {}
    for pasta in pastas:
        musicas_para_resumo[pasta] = buscar_musicas_pasta(pasta)

    print("\nüéµ Pastas com m√∫sicas MP3 (preview at√© 5 m√∫sicas):\n")
    exibir_resumo(pastas, musicas_para_resumo, limite=5)

    try:
        # Pergunta qual pasta o user quer abrir pra escolher m√∫sica
        escolha_pasta = int(input("\nEscolha a pasta para abrir (n√∫mero): "))
        
        # Valida o input (se n√£o estiver no intervalo v√°lido, cancela)
        if escolha_pasta not in range(1, len(pastas)+1):
            print("N√∫mero inv√°lido, saindo...")
            return

        # Pasta escolhida
        pasta_escolhida = pastas[escolha_pasta - 1]
        
        # Busca TODAS as m√∫sicas da pasta escolhida (lista completa)
        musicas = buscar_todas_musicas(pasta_escolhida)

        # Se n√£o achou nenhuma m√∫sica, j√° avisa e termina
        if not musicas:
            print(f"Nenhuma m√∫sica encontrada na pasta {pasta_escolhida}.")
            return

        # Mostra as m√∫sicas dispon√≠veis pra escolha
        print(f"\nüé∂ M√∫sicas em {pasta_escolhida}:")
        exibir_lista(musicas)

        # Pergunta qual m√∫sica tocar (pelo n√∫mero)
        escolha_musica = int(input("\nDigite o n√∫mero da m√∫sica para tocar: "))
        
        # Procura a m√∫sica selecionada na lista
        selecionada = next((m for m in musicas if m["id"] == escolha_musica), None)
        
        if selecionada:
            print(f"\n‚ñ∂Ô∏è Tocando: {selecionada['nome']}\n")
            tocar_musica(selecionada["caminho"])
        else:
            print("N√∫mero inv√°lido. Nenhuma m√∫sica selecionada.")
    except ValueError:
        print("Por favor, digite um n√∫mero v√°lido.")

# Aquele cl√°ssico: roda a main s√≥ se o script for executado diretamente
if __name__ == "__main__":
    main()
